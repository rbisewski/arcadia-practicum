AWSTemplateFormatVersion: '2010-09-09'
Description: Arcadia practicum via CloudFormation
Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.nano:
      Arch: HVM64
    t2.small:
      Arch: HVM64
  AWSInstanceType2NATArch:
    t1.micro:
      Arch: NATHVM64
    t2.micro:
      Arch: NATHVM64
    t2.nano:
      Arch: NATHVM64
    t2.small:
      Arch: NATHVM64
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-032930428bf1abbff
      HVMG2: ami-0aeb704d503081ea6
    us-east-2:
      HVM64: ami-027cab9a7bf0155df
      HVMG2: NOT_SUPPORTED
    us-west-1:
      HVM64: ami-088c153f74339f34c
      HVMG2: ami-0a7fc72dc0e51aa77
    us-west-2:
      HVM64: ami-01fee56b22f308154
      HVMG2: ami-0fe84a5b4563d8f27
Outputs:
  WebsiteURL:
    Description: URL for newly created Rails application
    Value:
      Fn::Join:
      - ''
      - - http://
        - Fn::GetAtt:
          - ApplicationLoadBalancer
          - DNSName
        - /notes
Parameters:
  DBAllocatedStorage:
    ConstraintDescription: must be between 5 and 1024Gb.
    Default: '5'
    Description: The size of the database (Gb)
    MaxValue: '1024'
    MinValue: '5'
    Type: Number
  DBInstanceClass:
    AllowedValues:
    - db.t1.micro
    - db.t2.micro
    - db.t2.small
    ConstraintDescription: must select a valid database instance type.
    Default: db.t2.small
    Description: The database instance type
    Type: String
  DBName:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
    Default: arcadiaDB
    Description: MySQL database name
    MaxLength: '64'
    MinLength: '1'
    Type: String
  DBPassword:
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
    Description: Password for MySQL database access
    MaxLength: '41'
    MinLength: '8'
    NoEcho: 'true'
    Type: String
  DBUser:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
    Description: Username for MySQL database access
    Default: arcadia
    MaxLength: '16'
    MinLength: '1'
    NoEcho: 'true'
    Type: String
  InstanceType:
    AllowedValues:
    - t1.micro
    - t2.nano
    - t2.micro
    - t2.small
    ConstraintDescription: must be a valid EC2 instance type.
    Default: t2.small
    Description: WebServer EC2 instance type
    Type: String
  MultiAZDatabase:
    AllowedValues:
    - 'true'
    - 'false'
    ConstraintDescription: must be either true or false.
    Default: 'true'
    Description: Create a multi-AZ MySQL Amazon RDS database instance
    Type: String
  Subnets:
    ConstraintDescription: must be a list of at least two existing subnets associated with at least two different availability zones. They should be residing in the selected Virtual Private Cloud.
    Description: The list of SubnetIds in your Virtual Private Cloud (VPC)
    Type: List<AWS::EC2::Subnet::Id>
  VpcId:
    ConstraintDescription: must be the VPC Id of an existing Virtual Private Cloud.
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    Type: AWS::EC2::VPC::Id
  WebServerCapacity:
    ConstraintDescription: must be between 1 and 5 EC2 instances.
    Default: '2'
    Description: The initial number of WebServer instances
    MaxValue: '5'
    MinValue: '1'
    Type: Number
Resources:
  ALBListener:
    Properties:
      DefaultActions:
      - TargetGroupArn:
          Ref: ALBTargetGroup
        Type: forward
      LoadBalancerArn:
        Ref: ApplicationLoadBalancer
      Port: '80'
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
  ALBTargetGroup:
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: stickiness.enabled
        Value: 'true'
      - Key: stickiness.type
        Value: lb_cookie
      - Key: stickiness.lb_cookie.duration_seconds
        Value: '30'
      UnhealthyThresholdCount: 5
      VpcId:
        Ref: VpcId
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  ApplicationLoadBalancer:
    Properties:
      Subnets:
        Ref: Subnets
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  DBEC2SecurityGroup:
    Properties:
      GroupDescription: Open database for access
      SecurityGroupIngress:
      - FromPort: '3306'
        IpProtocol: tcp
        SourceSecurityGroupId:
          Ref: WebServerSecurityGroup
        ToPort: '3306'
      VpcId:
        Ref: VpcId
    Type: AWS::EC2::SecurityGroup
  LaunchConfig:
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          full_install:
          - install_cfn
          - install_ruby_2_3_1
          - configure_mysql
          - install_application
        configure_mysql:
          packages:
            yum:
              mysql: []
              mysql-devel: []
              mysql-libs: []
        install_application:
          commands:
            01_install_application:
              command: /tmp/install_application > /var/log/install_application.log
            02_configure_reboot:
              command: echo /home/ec2-user/start-application >> /etc/rc.local
            03_start_application:
              command: /home/ec2-user/start-application
            04_cleanup:
              command: rm /tmp/install_application
          files:
            /home/ec2-user/start-application:
              content:
                Fn::Join:
                - ''
                - - '#!/bin/bash -e

                    '
                  - 'source /etc/profile.d/rvm.sh

                    '
                  - 'rvm use 2.3.1

                    '
                  - 'export HOME=/home/ec2-user

                    '
                  - 'export PATH=$PATH:/usr/local/bin

                    '
                  - 'cd /home/ec2-user/sample

                    '
                  - '# Startup the application

                    '
                  - 'rails server --binding 0.0.0.0 -p 80 -d

                    '
              group: root
              mode: '000500'
              owner: root
            /tmp/conditional_migration.rb:
              content:
                Fn::Join:
                - ''
                - - 'class CreateNotes < ActiveRecord::Migration[5.1]

                    '
                  - '  def change

                    '
                  - '    if ! table_exists?(:notes)

                    '
                  - '      create_table :notes do |t|

                    '
                  - '        t.string :title

                    '
                  - '        t.text :body

                    '
                  - '        t.timestamps

                    '
                  - '      end

                    '
                  - '    end

                    '
                  - '  end

                    '
                  - 'end

                    '
              group: root
              mode: '000500'
              owner: root
            /tmp/database.yml:
              content:
                Fn::Join:
                - ''
                - - 'development:

                    '
                  - '  adapter: mysql2

                    '
                  - '  encoding: utf8

                    '
                  - '  reconnect: false

                    '
                  - '  pool: 5

                    '
                  - '  database: '
                  - Ref: DBName
                  - '

                    '
                  - '  username: '
                  - Ref: DBUser
                  - '

                    '
                  - '  password: '
                  - Ref: DBPassword
                  - '

                    '
                  - '  host: '
                  - Fn::GetAtt:
                    - MySQLDatabase
                    - Endpoint.Address
                  - '

                    '
                  - '  port: '
                  - Fn::GetAtt:
                    - MySQLDatabase
                    - Endpoint.Port
                  - '

                    '
              group: root
              mode: '000400'
              owner: root
            /tmp/install_application:
              content:
                Fn::Join:
                - ''
                - - '#!/bin/bash -e

                    '
                  - 'source /etc/profile.d/rvm.sh

                    '
                  - 'rvm use 2.3.1

                    '
                  - 'export HOME=/home/ec2-user

                    '
                  - 'export PATH=$PATH:/usr/local/bin

                    '
                  - 'cd /home/ec2-user

                    '
                  - '# Kill the rails server if it is running to allow update

                    '
                  - 'if pgrep ruby &> /dev/null ; then pkill -TERM ruby ; fi

                    '
                  - '# This sample template creates a new application inline

                    '
                  - '# Typically you would use files and/or sources to download

                    '
                  - '# your application package and perform any configuration here.

                    '
                  - '# Create a new application, with therubyracer javascript library

                    '
                  - 'rails new sample -d mysql --skip-spring --skip-bundle --force

                    '
                  - 'cd /home/ec2-user/sample

                    '
                  - 'sed -i ''s/^# \(.*therubyracer.*$\)/\1/'' Gemfile

                    '
                  - 'bundle install

                    '
                  - '# Create a sample scoffold

                    '
                  - 'rails generate scaffold Note title:string body:text --force

                    '
                  - '# Configure the database connection

                    '
                  - 'mv /tmp/database.yml config

                    '
                  - '# Since there are multiple instances running, conditionalize
                    the migration

                    '
                  - '# so that only 1 host creates the tables. In the real world,
                    you may check to

                    '
                  - '# see if the table matches the schema and do a migrate so that
                    updates work

                    '
                  - 'file=$(find db/migrate/*create_notes* -type f -printf ''%f'')

                    '
                  - 'mv /tmp/conditional_migration.rb db/migrate/$file

                    '
                  - 'rake db:migrate

                    '
              group: root
              mode: '000500'
              owner: root
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content:
                Fn::Join:
                - ''
                - - '[main]

                    '
                  - stack=
                  - Ref: AWS::StackId
                  - '

                    '
                  - region=
                  - Ref: AWS::Region
                  - '

                    '
              group: root
              mode: '000400'
              owner: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content:
                Fn::Join:
                - ''
                - - '[cfn-auto-reloader-hook]

                    '
                  - 'triggers=post.update

                    '
                  - 'path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init

                    '
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - Ref: AWS::StackName
                  - '         --resource LaunchConfig '
                  - '         --configsets full_install '
                  - '         --region '
                  - Ref: AWS::Region
                  - '

                    '
                  - 'runas=root

                    '
              group: root
              mode: '000400'
              owner: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_ruby_2_3_1:
          commands:
            01_install_ruby:
              command: /tmp/install_ruby > /var/log/install_ruby.log
          files:
            /tmp/install_ruby:
              content:
                Fn::Join:
                - '

                  '
                - - '#!/bin/bash'
                  - curl -sSL https://get.rvm.io | bash
                  - source /etc/profile.d/rvm.sh
                  - rvm install 2.3.1
                  - rvm --default use 2.3.1
                  - gem install rails
              group: root
              mode: '000500'
              owner: root
    Properties:
      ImageId:
        Fn::FindInMap:
        - AWSRegionArch2AMI
        - Ref: AWS::Region
        - Fn::FindInMap:
          - AWSInstanceType2Arch
          - Ref: InstanceType
          - Arch
      InstanceType:
        Ref: InstanceType
      SecurityGroups:
      - Ref: WebServerSecurityGroup
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - '#!/bin/bash -xe

              '
            - 'yum update -y aws-cfn-bootstrap

              '
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - Ref: AWS::StackId
            - '         --resource LaunchConfig '
            - '         --configsets full_install '
            - '         --region '
            - Ref: AWS::Region
            - '

              '
            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - Ref: AWS::StackId
            - '         --resource WebServerGroup '
            - '         --region '
            - Ref: AWS::Region
            - '

              '
    Type: AWS::AutoScaling::LaunchConfiguration
  MySQLDatabase:
    Properties:
      AllocatedStorage:
        Ref: DBAllocatedStorage
      DBInstanceClass:
        Ref: DBInstanceClass
      DBName:
        Ref: DBName
      Engine: MySQL
      MasterUserPassword:
        Ref: DBPassword
      MasterUsername:
        Ref: DBUser
      MultiAZ:
        Ref: MultiAZDatabase
      VPCSecurityGroups:
      - Fn::GetAtt:
        - DBEC2SecurityGroup
        - GroupId
    Type: AWS::RDS::DBInstance
  WebServerGroup:
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
    Properties:
      DesiredCapacity:
        Ref: WebServerCapacity
      LaunchConfigurationName:
        Ref: LaunchConfig
      MaxSize: '5'
      MinSize: '1'
      TargetGroupARNs:
      - Ref: ALBTargetGroup
      VPCZoneIdentifier:
        Ref: Subnets
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '1'
        MinInstancesInService: '1'
        PauseTime: PT30M
        WaitOnResourceSignals: 'true'
  WebServerSecurityGroup:
    Properties:
      GroupDescription: Enable HTTP access locked down to the load balancer access
      SecurityGroupIngress:
      - FromPort: '80'
        IpProtocol: tcp
        SourceSecurityGroupId:
          Fn::Select:
          - 0
          - Fn::GetAtt:
            - ApplicationLoadBalancer
            - SecurityGroups
        ToPort: '80'
      VpcId:
        Ref: VpcId
    Type: AWS::EC2::SecurityGroup
